name: open-webui

services:
  # Open WebUI service
  open-webui:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: open-webui
    restart: unless-stopped
    networks:
      - proxy
      - open-webui
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - OLLAMA_BASE_URL=http://ollama:11434
      - ENABLE_RAG_WEB_SEARCH=${ENABLE_RAG_WEB_SEARCH:-True}
      - RAG_WEB_SEARCH_ENGINE=${RAG_WEB_SEARCH_ENGINE:-searxng}
      - RAG_WEB_SEARCH_RESULT_COUNT=${RAG_WEB_SEARCH_RESULT_COUNT:-3}
      - RAG_WEB_SEARCH_CONCURRENT_REQUESTS=${RAG_WEB_SEARCH_CONCURRENT_REQUESTS:-10}
      - SEARXNG_QUERY_URL=http://searxng:8080/search?q=<query>
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./open-webui:/app/backend/data
    extra_hosts:
      - host.docker.internal=host-gateway
    depends_on:
      ollama:
        condition: service_started
        required: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.open-webui.entrypoints=web"
      - "traefik.http.services.open-webui.loadbalancer.server.port=8080"
      - "traefik.http.routers.open-webui.service=open-webui"
      - "traefik.http.routers.open-webui.rule=HostRegexp(`open-webui.storage-01.lan`) || Host(`open-webui.docker.localhost`)"
      # - "traefik.http.routers.open-webui.tls=true"
      # - "traefik.http.routers.open-webui.tls.certresolver=letencrypt"

  # Ollama service with GPU acceleration
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    networks:
      - proxy
      - open-webui
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-24h}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./ollama:/root/.ollama
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ollama.entrypoints=web"
      - "traefik.http.services.ollama.loadbalancer.server.port=11434"
      - "traefik.http.routers.ollama.service=ollama"
      - "traefik.http.routers.ollama.rule=HostRegexp(`ollama.storage-01.lan`) || Host(`ollama.docker.localhost`)"
      # - "traefik.http.routers.ollama.tls=true"
      # - "traefik.http.routers.ollama.tls.certresolver=letencrypt"
      # - "traefik.http.routers.ollama.middlewares=ollama-auth"
      # - "traefik.http.middlewares.ollama-auth.basicauth.users=${OLLAMA_API_CREDENTIALS}"
    # GPU Configuration for Ollama:
    # - Set GPU_DRIVER, GPU_COUNT, GPU_CAPABILITIES in .env
    # - Supported drivers: nvidia, rocm, etc.
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: ${GPU_DRIVER:-nvidia}
    #           count: ${GPU_COUNT:-all}
    #           capabilities: 
    #             - ${GPU_CAPABILITIES:-gpu}

  # SearXNG service for RAG functionality
  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    restart: unless-stopped
    networks:
      - proxy
      - open-webui
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - SEARXNG_HOSTNAME=searxng.docker.localhost
      - SEARXNG_BASE_URL=http://${SEARXNG_HOSTNAME:-localhost}:${SEARXNG_PORT:-8080}/
      - REDIS_URL=redis://redis:6379
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./searxng:/etc/searxng:rw
      - searxng_data:/var/cache/searxng:rw
    depends_on:
      redis:
        condition: service_started
        required: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.searxng.entrypoints=web"
      - "traefik.http.services.searxng.loadbalancer.server.port=8080"
      - "traefik.http.routers.searxng.service=searxng"
      - "traefik.http.routers.searxng.rule=HostRegexp(`searxng.storage-01.lan`) || Host(`searxng.docker.localhost`)"
      # - "traefik.http.routers.searxng.tls=true"
      # - "traefik.http.routers.searxng.tls.certresolver=letencrypt"

  # Faster Whisper service with GPU acceleration
  faster-whisper:
    image: lscr.io/linuxserver/faster-whisper:latest
    container_name: faster-whisper
    restart: unless-stopped
    networks:
      - proxy
      - open-webui
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Etc/UTC}
      - WHISPER_MODEL=${WHISPER_MODEL:-tiny-int8}
      - WHISPER_BEAM=${WHISPER_BEAM:-1}
      - WHISPER_LANG=${WHISPER_LANG:-en}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./faster-whisper:/config
    # GPU Configuration for Faster Whisper:
    # - Set GPU_DRIVER, GPU_COUNT, GPU_CAPABILITIES in .env
    # - Supported drivers: nvidia, rocm, etc.
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: ${GPU_DRIVER:-nvidia}
    #           count: ${GPU_COUNT:-all}
    #           capabilities: 
    #             - ${GPU_CAPABILITIES:-gpu}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.faster-whisper.entrypoints=web"
      - "traefik.http.services.faster-whisper.loadbalancer.server.port=10300"
      - "traefik.http.routers.faster-whisper.service=faster-whisper"
      - "traefik.http.routers.faster-whisper.rule=HostRegexp(`faster-whisper.storage-01.lan`) || Host(`faster-whisper.docker.localhost`)"
      # - "traefik.http.routers.faster-whisper.tls=true"
      # - "traefik.http.routers.faster-whisper.tls.certresolver=letencrypt"

  # Redis service for SearXNG caching
  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    networks:
      - open-webui
    volumes:
      - valkey_data:/data
    labels:
      - "traefik.enable=false"  # Redis doesn't need external access

networks:
  proxy:
    external: true
    name: proxy
  open-webui:
    name: open-webui

volumes:
  searxng_data:
  valkey_data: 