name: traefik

# Production-ready Traefik configuration with Let's Encrypt wildcard certificates
# Uses Cloudflare DNS challenge for domain validation

services:
  # Traefik reverse proxy with Let's Encrypt wildcard support
  traefik:
    container_name: traefik
    image: "traefik:v3.5"
    command:
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # Timeout configuration for large file uploads (e.g., Immich)
      - "--entrypoints.websecure.transport.respondingtimeouts.readtimeout=600s"
      - "--entrypoints.websecure.transport.respondingtimeouts.writetimeout=600s"
      - "--entrypoints.websecure.transport.respondingtimeouts.idletimeout=600s"
      
      # API and Dashboard
      - "--api.insecure=true"
      - "--api.dashboard=true"
      
      # Logging
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      - "--accesslog=${TRAEFIK_ACCESS_LOG:-true}"
      
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.network=proxy"
      
      # Let's Encrypt configuration for wildcard certificates using Cloudflare DNS challenge
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@pixeloven.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json"
      # - "--certificatesresolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"

      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      
      # Default TLS configuration
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certresolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=${HOSTNAME:-pixeloven.com}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${HOSTNAME:-pixeloven.com}"
      
      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/certs
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN:-your-cloudflare-api-token-here}
    labels:
      # Dashboard routing
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${HOSTNAME:-pixeloven.com}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    networks:
      - proxy

  # Test service to demonstrate functionality
  whoami:
    image: "traefik/whoami"
    container_name: "traefik-whoami"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.rule=Host(`whoami.${HOSTNAME:-pixeloven.com}`)"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.tls.certresolver=letsencrypt"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
    networks:
      - proxy

networks:
  proxy:
    name: proxy

volumes:
  traefik-certs: